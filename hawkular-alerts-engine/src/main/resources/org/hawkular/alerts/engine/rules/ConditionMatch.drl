/*
 * Copyright 2015-2016 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.hawkular.alerts.engine.rules

import org.hawkular.alerts.api.model.action.Action;
import org.hawkular.alerts.api.model.condition.AvailabilityCondition;
import org.hawkular.alerts.api.model.condition.AvailabilityConditionEval;
import org.hawkular.alerts.api.model.condition.ConditionEval;
import org.hawkular.alerts.api.model.condition.CompareCondition;
import org.hawkular.alerts.api.model.condition.CompareConditionEval;
import org.hawkular.alerts.api.model.condition.ExternalCondition;
import org.hawkular.alerts.api.model.condition.ExternalConditionEval;
import org.hawkular.alerts.api.model.condition.EventCondition;
import org.hawkular.alerts.api.model.condition.EventConditionEval;
import org.hawkular.alerts.api.model.condition.StringCondition;
import org.hawkular.alerts.api.model.condition.StringConditionEval;
import org.hawkular.alerts.api.model.condition.ThresholdCondition;
import org.hawkular.alerts.api.model.condition.ThresholdConditionEval;
import org.hawkular.alerts.api.model.condition.ThresholdRangeCondition;
import org.hawkular.alerts.api.model.condition.ThresholdRangeConditionEval;
import org.hawkular.alerts.api.model.condition.TriggerConditionEval;
import org.hawkular.alerts.api.model.condition.RateCondition;
import org.hawkular.alerts.api.model.condition.RateConditionEval;
import org.hawkular.alerts.api.model.dampening.Dampening;
import org.hawkular.alerts.api.model.dampening.Dampening.Type;
import org.hawkular.alerts.api.model.data.Data;
import org.hawkular.alerts.api.model.event.Alert;
import org.hawkular.alerts.api.model.event.Event;
import org.hawkular.alerts.api.model.event.EventType;
import org.hawkular.alerts.api.model.trigger.Match;
import org.hawkular.alerts.api.model.trigger.Mode;
import org.hawkular.alerts.api.model.trigger.Trigger;
import org.hawkular.alerts.api.model.trigger.TriggerAction;
import org.hawkular.alerts.api.services.ActionsService;
import org.hawkular.alerts.engine.util.RateData;

import org.jboss.logging.Logger;

import java.util.ArrayList;
import java.util.Set;
import java.util.List;
import java.util.Map;
import org.hawkular.alerts.engine.util.ActionsValidator;

global Logger log;
global ActionsService actions;
global List alerts;
global List events;
global Set pendingTimeouts;
global Map autoResolvedTriggers;
global Set disabledTriggers;


////// CONDITION MATCHING
//
// To perform dampening it is important not only to record positive condition evaluations but also false
// evaluations.  True evals will contribute to an alert firing. And for default dampening (1 consecutive condition set
// match) it is enough to fire the trigger.  But negative evals also contribute to dampening, resetting strict
// dampening, and potentially resetting relaxed dampening.  So, each defined Condition will be evaluated when its
// relevant Data facts are present in working memory , generating a ConditionEval fact which will then be applied
// to the relevant Dampening fact.
//
// Data facts will be applied to all relevant Condition evals, and then will be retracted (using rule complexity
// to fire the retract rule after the condition evals).
//
// It is a precondition that all Triggers in working memory are enabled (i.e. enabled == true ).

// ConditionEval rules

rule Threshold
    when 
        $t : Trigger( $tenantId : tenantId, $tid : id, $tmode : mode, $tsource : source )
        $c : ThresholdCondition ( tenantId == $tenantId, triggerId == $tid, triggerMode == $tmode, $did : dataId )
        $d : Data( tenantId == $tenantId, source == $tsource, id == $did )
    then
        ThresholdConditionEval ce = new ThresholdConditionEval($c, $d);
        if (log != null && log.isDebugEnabled()) {
            log.debug("Threshold Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog());
        }
        insert( ce );
end

rule ThresholdRange
    when 
        $t : Trigger( $tenantId : tenantId, $tid : id, $tmode : mode, $tsource : source )
        $c : ThresholdRangeCondition ( tenantId == $tenantId, triggerId == $tid, triggerMode == $tmode, $did : dataId )
        $d : Data( tenantId == $tenantId, source == $tsource, id == $did )
    then
        ThresholdRangeConditionEval ce = new ThresholdRangeConditionEval($c, $d);
        if (log != null && log.isDebugEnabled()) {
            log.debug("ThresholdRange Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog());
        }
        insert( ce );
end

// Note that at the moment a CompareCondition will only ever match if the NumericData facts are inserted
// at the same time. If only one Data is present in WM it will not match this rule and will get retracted
// as unused/unnecessary.  We may have to revisit this behavior and nail down the desired semantics of this
// kind of condition. But this may be correct behavior as is.  It makes sense to me that this sort of condition
// should likely be used on data reported in the same batch. But if not, one approach may be to insert a special
// fact type, here, like CompareData (in addition to inserting as NumericData, for other condition evals) and then
// handle that retraction differently, always holding onto the most recent data for the dataId, as needed for comparing
// data when it arrives at different times.
rule Compare
    when 
        $t : Trigger( $tenantId : tenantId, $tid : id, $tmode : mode, $tsource : source )
        $c  : CompareCondition ( tenantId == $tenantId, triggerId == $tid, triggerMode == $tmode,
                                 $d1id : dataId, $d2id : data2Id )
        $d1 : Data( tenantId == $tenantId, source == $tsource, id == $d1id )
        $d2 : Data( tenantId == $tenantId, source == $tsource, id == $d2id )
    then
        CompareConditionEval ce = new CompareConditionEval($c, $d1, $d2);
        if (log != null && log.isDebugEnabled()) {
            log.debug("Compare Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog());
        }
        insert( ce );
end

rule Availability
    when 
        $t : Trigger( $tenantId : tenantId, $tid : id, $tmode : mode, $tsource : source )
        $c : AvailabilityCondition ( tenantId == $tenantId, triggerId == $tid, triggerMode == $tmode, $did : dataId )
        $d : Data( tenantId == $tenantId, source == $tsource, id == $did )
    then
        AvailabilityConditionEval ce = new AvailabilityConditionEval($c, $d);
        if (log != null && log.isDebugEnabled()) {
            log.debug("Availability Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog());
        }
        insert( ce );
end

rule String
    when 
        $t : Trigger( $tenantId : tenantId, $tid : id, $tmode : mode, $tsource : source )
        $c : StringCondition ( tenantId == $tenantId, triggerId == $tid, triggerMode == $tmode, $did : dataId  )
        $d : Data( tenantId == $tenantId, source == $tsource, id == $did )
    then
        StringConditionEval ce = new StringConditionEval($c, $d);
        if (log != null && log.isDebugEnabled()) {
            log.debug("String Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog());
        }
        insert( ce );
end

rule External
    when 
        $t : Trigger( $tenantId : tenantId, $tid : id, $tmode : mode, $tsource : source )
        $c : ExternalCondition ( tenantId == $tenantId, triggerId == $tid, triggerMode == $tmode, $did : dataId  )
        $d : Data( tenantId == $tenantId, source == $tsource, id == $did )
    then
        ExternalConditionEval ce = new ExternalConditionEval($c, $d);
        if (log != null && log.isDebugEnabled()) {
            log.debug("External Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog());
        }
        insert( ce );
end

rule Event
    when
        $t : Trigger( $tenantId : tenantId, $tid : id, $tmode : mode, $tsource : source )
        $c : EventCondition ( tenantId == $tenantId, triggerId == $tid, triggerMode == $tmode, $did : dataId )
        $d : Event( tenantId == $tenantId, dataSource == $tsource, dataId == $did )
    then
        EventConditionEval ce = new EventConditionEval($c, $d);
        if (log != null && log.isDebugEnabled()) {
            log.debug("Event Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog());
        }
        insert( ce );
end

// RateCondition is a bit different in that it calculates rate of change between the previous and most current
// value of the same dataId and performs an evaluation againts that computed value.  The previous value is
// stored as a RateData fact. This rule initializes the RateData fact to the current value. It will be used
// when the next datum for dataId arrives in working memory.
rule ProvideInitialRateData
    when
        $t : Trigger( $tenantId : tenantId, $tid : id, $tmode : mode, $tsource : source )
        $c : RateCondition ( tenantId == $tenantId, triggerId == $tid, triggerMode == $tmode, $did : dataId )
        $d : Data( tenantId == $tenantId, source == $tsource, id == $did )
        not  RateData( data.tenantId == $tenantId, data.source == $tsource, data.id == $did )
    then
        RateData rateData = new RateData( $d );

        insert( rateData );
end

// Given previous and current data for a given dataId, perform a RateCondition evaluation.
rule Rate
    when
        $t : Trigger( $tenantId : tenantId, $tid : id, $tmode : mode, $tsource : source )
        $c  : RateCondition ( tenantId == $tenantId, triggerId == $tid, triggerMode == $tmode, $did : dataId )
        $d  : Data( tenantId == $tenantId, source == $tsource, id == $did, $dt : timestamp )
        $rd : RateData( data.tenantId == $tenantId, data.source == $tsource, data.id == $did, data.timestamp < $dt )
    then
        RateConditionEval ce = new RateConditionEval($c, $d, $rd.getData());
        if (log != null && log.isDebugEnabled()) {
            log.debug("Rate Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog());
        }
        insert( ce );
end


// Data retraction rules
// These rules are expected to fire after any Eval rules, due to their simplicity.  Note that Data is not retracted
// in the (above) rules, that generate ConditionEval facts, because one Datum can generate multiple evals, for different
// Triggers.

// Replace the previous data with the current data and retract the current data fact. 
rule RetractProcessedRateData
    when
        $rd : RateData( $tenantId : data.tenantId, $dsource : data.source, $did : data.id )
        $d  : Data( tenantId == $tenantId, source == $dsource, id == $did )
    then
        $rd.setData( $d );

        if (log != null && log.isDebugEnabled()) {
            log.debug( "Updating " + $rd + "..." );
            log.debug( "Retracting " + $d + "..." );
        }
        retract ( $d );
        update ( $rd );
end

rule RetractProcessedData
    when
        $d : Data()
    then
        if (log != null && log.isDebugEnabled()) {
            log.debug( "Retracting " + $d + "..." );
        }
        retract ( $d );
end

rule RetractProcessedEvent
    when
        $e : Event()
    then
        if (log != null && log.isDebugEnabled()) {
            log.debug( "Retracting " + $e + "..." );
        }
        retract ( $e );
end

////// DAMPENING
//
// Dampening defines for each trigger how the number of positive, negative, and total evaluations determine
// whether a trigger fires.  Additionally, there may be a constraint on the period of time involved in the
// evaluations.
//
// Dampening is optionally defined for a Trigger.  If not defined then default dampening will be applied for uniformity
// of processing.  Default dampening is basically handled as STRICT( 1 ).  Meaning 1 positive, consecutive evaluation
// is required for the trigger to fire.  In other words, if the conditions match, the trigger fires.
//
// So, there is one Dampening fact for each Trigger fact.  And it is continually updated given each relevant condition
// set evaluation for the trigger.
//
// The Dampening fact is updated on each condition evaluation and then the ConditionEvaluation fact is retracted
// from working memory.  For single-condition triggers it is fairly straightforward; each condition evaluation results
// in a dampening evaluation.
//
// Understanding multi-condition Trigger evaluation is important.  ConditionEvals are generated when the relevant Data
// appears in working memory.  Data for specific DataIds can appear at different rates. There can be several more
// ConditionEvals for DataId X than for DataId Y, or even before we have a single eval for DataId Y.  Our approach is
// chosen for two reasons: simplicity of understanding, and the general desire for recency in alerting.  For 
// *multi-condition* Trigger evaluations we test only tuples containing the most recent evaluation of each condition.
//
// For example, consider an ALL-match Trigger T with two conditions, (X > 100) and (Y > 200), and dampening Strict(2).
// Now assume Data arrives like this:
//     t1, X=125
//     t2, X=50
//     t3, Y=300
//     t4, X=110
//     t5, Y=150
// The t1 condition eval of X=125 will be superseded by the t2 condition eval of X=50. When Y is finally reported at t3,
// the tuple tested for T is (X=50, Y=300). The dampening eval is false because the X condition (50 > 100) is false.
// At t4 we test the tuple (X=110, Y=300). The dampening eval is true because both conditions are met.  T does not
// fire because we need two consecutive true tuples. At t5 the condition eval of Y=300 will be superseded by
// Y=150, the tuple (X=110, Y=150) will evaluate to false.  T will not fire, the dampening will reset.
//
// Now assume T were an ANY-match trigger. For ANY-match we still use a tuple with the most recent evaluation for each
// condition. But, we don't need an evaluation for every condition, and we only need one condition eval to be true in
// order to satisfy the T.  The t1 evaluation of (x=125, Y=N/A) is true because the X condition is true. We can ignore
// the Y condition.  T does not fire because we need two consecutive true tuples.  The t2 evaluation of (x=50, Y=N/A)
// is false. T does not fire, the dampening is reset.  The t3 evaluation of (x=50, Y=300) is true because the Y
// condition is true. T does not fire because we need two consecutive true tuples.  The t4 evaluation of (x=110, Y=300)
// is true in both ways.  T fires and the dampening is reset. The t5 evaluation of (x=110, Y=150) is true because the
// X condtion is again true, and so on...
//
// Given the above approach to matching, we must hold onto the most recent evaluation of each condition used in
// a multi-condition Trigger.  What is important to understand is the most recent evaluation of each condition
// is held inside the relevant Dampening record and not as a Fact in working memory.  That allows us to have very
// simple processing here in the rules.  We just take every condition evaluation, have the required dampening
// Fact process it, and then retract the ConditionEvaluation.
//

// Dampening update rules

rule ProvideDefaultDampening
    when
        $t : Trigger( $tenantId : tenantId, $tid : id, $tmode : mode )
        not Dampening( tenantId == $tenantId, triggerId == $tid, triggerMode == $tmode )
    then
        if (log != null && log.isDebugEnabled()) {
            log.debug("Adding default " + $tmode + " dampening for trigger! " + $t.getId());
        }
        Dampening d = Dampening.forStrict( $tenantId, $tid, $tmode, 1 );
        insert( d );
end

rule CollectConditionEvals
    when
        $t  : Trigger( $tenantId : tenantId, $tid : id, $tmode : mode )
        $ces : TriggerConditionEval( size > 0 )
               from accumulate(
                $ce: ConditionEval ( tenantId == $tenantId,  triggerId == $tid ),
                init( TriggerConditionEval tce = new TriggerConditionEval($tenantId, $tid, $tmode); ),
                action ( tce.addConditionEval($ce); ),
                result( tce )
               )
    then
        $ces.getConditionEvals().stream().forEach(ce -> retract(ce));
        insert( $ces );
end

rule DampenTrigger
    when
        $t  : Trigger( $tenantId : tenantId, $tid : id, $tmode : mode )
        $d  : Dampening( tenantId == $tenantId, triggerId == $tid, triggerMode == $tmode, satisfied == false )
        $tce : TriggerConditionEval ( tenantId == $tenantId,  triggerId == $tid )
    then
        retract( $d );
        retract ( $tce );

        $d.perform( $t.getMatch(), $tce );

        insert( $d );

        if (log != null && log.isDebugEnabled()) {
            log.debug( "Updated " + $d + " using [match=" + $t.getMatch() + "] " + $d.getCurrentEvals() );
            log.debug( "Retracted " + $tce );
        }
end


// Dampening with STRICT_TIMEOUT
// Because we are not running the engine in Stream/CEP mode and instead use discrete rulebase executions, we
// can not perform temporal reasoning inside the rules.  So, to perform timeouts we "post" STRICT_TIMEOUT
// Dampening records when the timer should start, so that the timeouts  can be checked externally.  We remove
// timeouts when the dampening is reset.
rule DampeningTimeoutAdd
    when
        $d   : Dampening( type == Type.STRICT_TIMEOUT, numTrueEvals == 1, satisfied == false )
    then
        pendingTimeouts.add( $d );
end 

// TODO: does this rule fire too often? It may fire each time the condition set is evaluates to false. Although,
//       it is fairly lightweight. 
rule DampeningTimeoutRemove
    when
        $d   : Dampening( type == Type.STRICT_TIMEOUT, numTrueEvals == 0, satisfied == false )
    then
        pendingTimeouts.remove( $d );
end 



////// EVENT GENERATION / TRIGGER MODE HANDLING

// If a Trigger's FIRE mode Dampening is satisfied, then the Trigger fires and generates an Alert.  The Trigger's
// FIRE mode Dampening fact is then reset and updated in working memory, ready to again track evals for the Trigger.
// If the Trigger has safety mode enabled then we toggle the Trigger to SAFETY mode and it can not fire again
// until the safety mode Dampening is satisfied and the Trigger returns to FIRE mode.
rule AlertOnSatisfiedDampening
    when
        $t  : Trigger( mode == Mode.FIRING, $tenantId : tenantId, $tid : id )
        $d  : Dampening( triggerMode == Mode.FIRING, tenantId == $tenantId, triggerId == $tid, satisfied == true )
    then
        Event newEvent;

        // Only some triggers generate an alert
        if ($t.getEventType() == EventType.ALERT) {
            if (log != null && log.isDebugEnabled()) {
                log.debug("Alert! Dampening Satisfied! " + $d.log());
            }

            newEvent = new Alert( $t.getTenantId(), $t, $d, $d.getSatisfyingEvals() );
            // Adding an Alert will implicitly add the related Event
            alerts.add((Alert)newEvent);

        } else {
            if (log != null && log.isDebugEnabled() && $t.getEventType() == EventType.EVENT) {
                log.debug("Event! Dampening Satisfied! " + $d.log());
            }

            newEvent = new Event( $t.getTenantId(), $t, $d, $d.getSatisfyingEvals() );
            events.add(newEvent);
        }

        // We insert the generated events on the firing cycles to allow chained conditions
        insert( newEvent );

        if (actions != null) {
            for (TriggerAction triggerAction : $t.getActions()) {
                actions.send(triggerAction, newEvent);
            }
        }

        retract( $d );
        $d.reset();
        insert( $d );

        if ($t.isAutoResolve()) {
            if (log != null && log.isDebugEnabled()) {
                log.debug("Setting Trigger to AutoResolve Mode! " + $t);
            }
            retract( $t );
            $t.setMode(Mode.AUTORESOLVE);
            insert( $t );

        } else if ($t.isAutoDisable()) {
            if (log != null && log.isDebugEnabled()) {
                log.debug("Setting Trigger Disabled! " + $t);
            }

            // the autoDisable trigger handling will result in a trigger reload, so we can just retract the
            // current definition. And given that it will be disabled, it actually will not get loaded.
            disabledTriggers.add( $t );

            retract( $t );

        } else if (log != null && log.isDebugEnabled()) {
            log.debug("Trigger remains in Firing mode, AutoDisable and AutoResolve not set. " + $t);
        }
end


rule SetFiringModeOnSatisfiedDampening
    when
        $t  : Trigger( mode == Mode.AUTORESOLVE, $tenantId : tenantId, $tid : id )
        $d  : Dampening( triggerMode == Mode.AUTORESOLVE, tenantId == $tenantId, triggerId == $tid, satisfied == true )
    then
        if (log != null && log.isDebugEnabled()) {
            log.debug("SetFiringModeOnSatisfiedDampening! " + $d.log());
        }

        // the autoResolved trigger handling will result in a trigger reload, so we can just retract the
        // current definition. We set it to FIRING mode but that is mainly a cosmetic change and affects
        // only the Trigger instance placed into autoResolvedTriggers.
        $t.setMode(Mode.FIRING);
        autoResolvedTriggers.put( $t, $d.getSatisfyingEvals() );

        retract( $d );
        retract( $t );
end
